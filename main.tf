data "aws_route53_zone" "primary" {
  name = "${var.website_root_domain}"
}

resource "aws_acm_certificate" "cert" {
  domain_name = "${var.website_url}"
  validation_method = "DNS"
  subject_alternative_names = ["www.${var.website_url}"]
  tags {
    Name = "${var.prefix}_${var.website_name}"
    Owner = "${var.website_owner}"
  }

}

resource "aws_route53_record" "cert_validation-cn" {
  name = "${aws_acm_certificate.cert.domain_validation_options.0.resource_record_name}"
  type = "${aws_acm_certificate.cert.domain_validation_options.0.resource_record_type}"
  zone_id = "${data.aws_route53_zone.primary.id}"
  records = ["${aws_acm_certificate.cert.domain_validation_options.0.resource_record_value}"]
  ttl = 60
}

resource "aws_route53_record" "cert_validation-www" {
  name = "${aws_acm_certificate.cert.domain_validation_options.1.resource_record_name}"
  type = "${aws_acm_certificate.cert.domain_validation_options.1.resource_record_type}"
  zone_id = "${data.aws_route53_zone.primary.id}"
  records = ["${aws_acm_certificate.cert.domain_validation_options.1.resource_record_value}"]
  ttl = 60
}

resource "aws_acm_certificate_validation" "cert" {
  certificate_arn = "${aws_acm_certificate.cert.arn}"
  validation_record_fqdns = ["${aws_route53_record.cert_validation-cn.fqdn}","${aws_route53_record.cert_validation-www.fqdn}"]
}

resource "aws_s3_bucket" "website_bucket_cloud_front" {
  bucket = "${var.prefix}-${var.website_name}"
  acl    = "public-read"

  website {
    index_document = "index.html"
    error_document = "404.html"
  }
  tags {
    Name = "${var.prefix}_${var.website_name}_website_bucket"
    Owner = "${var.website_owner}"
  }
}

resource "aws_s3_bucket_policy" "website_bucket_cloud_front_policy" {
  bucket = "${aws_s3_bucket.website_bucket_cloud_front.id}"
  policy =<<POLICY
{
    "Version": "2008-10-17",
    "Id": "PolicyForCloudFrontPrivateContent",
    "Statement": [
        {
            "Sid": "AllowPublicRead",
            "Effect": "Allow",
            "Principal": {
                "AWS": "*"
            },
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::${var.prefix}-${var.website_name}/*"
        }
    ]
}
    POLICY
}

resource "aws_s3_bucket" "website_bucket_logs" {
  bucket = "${var.prefix}-${var.website_name}-logs"
  acl    = "private"

    tags {
    Name = "${var.prefix}_${var.website_name}_website_logs_bucket"
    Owner = "${var.website_owner}"
  }
}

resource "aws_cloudfront_origin_access_identity" "website_cf_identity" {
  comment = "${var.website_name}_cf_identity"
}

resource "aws_cloudfront_distribution" "websitecf_s3_distribution" {
  origin {
    domain_name = "${var.prefix}-${var.website_name}.s3-website-us-east-1.amazonaws.com"
    origin_id   = "S3-Website-${var.prefix}-${var.website_name}.s3-website-us-east-1.amazonaws.com"

    custom_origin_config {
      http_port = 80
      https_port = 443
      origin_ssl_protocols = ["TLSv1","TLSv1.1","TLSv1.2"]
      origin_protocol_policy = "http-only"
    }
#    s3_origin_config {
#      origin_access_identity = "${aws_cloudfront_origin_access_identity.website_cf_identity.cloudfront_access_identity_path}"
#    }
  }

  enabled             = true
  is_ipv6_enabled     = true
  comment             = "Autogenerated by ${var.website_owner} using terraform"
  default_root_object = "index.html"

  logging_config {
    include_cookies = false
    bucket          = "${var.prefix}-${var.website_name}-logs.s3.amazonaws.com"
    prefix          = "${var.website_name}_cf"
  }

  aliases = ["${var.website_url}","www.${var.website_url}"]
  default_cache_behavior {
    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = "S3-Website-${var.prefix}-${var.website_name}.s3-website-us-east-1.amazonaws.com"

    forwarded_values {
      query_string = false

      cookies {
        forward = "none"
      }
    }

    viewer_protocol_policy = "redirect-to-https"
    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
  }

  price_class = "PriceClass_100"

  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }

  tags {
    Name = "${var.prefix}_${var.website_name}_website_bucket"
    Owner = "${var.website_owner}"
  }

  viewer_certificate {
    ssl_support_method = "sni-only"
    acm_certificate_arn = "${aws_acm_certificate.cert.arn}"
  }
  depends_on = ["aws_acm_certificate.cert","aws_acm_certificate_validation.cert"]
}

resource "aws_route53_record" "dns" {
  zone_id = "${data.aws_route53_zone.primary.zone_id}"
  name    = "${var.website_url}"
  type    = "A"
  alias {
    name                   = "${aws_cloudfront_distribution.websitecf_s3_distribution.domain_name}"
    zone_id = "${aws_cloudfront_distribution.websitecf_s3_distribution.hosted_zone_id}"
    evaluate_target_health = false
  }
}

resource "aws_route53_record" "dns-www" {
  zone_id = "${data.aws_route53_zone.primary.zone_id}"
  name    = "www.${var.website_url}"
  type    = "CNAME"
  ttl     = "300"
  records = ["${aws_cloudfront_distribution.websitecf_s3_distribution.domain_name}"]
}
